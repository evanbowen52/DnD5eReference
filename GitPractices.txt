Branch Naming:
main: Production-ready code
develop: Integration branch (optional for smaller projects)
feature/: New features (e.g., feature/spells-page)
fix/: Bug fixes
docs/: Documentation updates

# Start a new feature
git checkout main
git pull origin main
git checkout -b feature/your-feature-name

# Make changes, then...
git add .
git commit -m "feat: add new feature"
git push -u origin feature/your-feature-name
# Then create a PR on GitHub

Commit Message Convention (Conventional Commits):
feat: New feature
fix: Bug fix
docs: Documentation changes
style: Code style (formatting, etc.)
refactor: Code changes that don't fix bugs or add features
test: Adding or modifying tests
chore: Build process or tooling changes

GitHub-Specific Tips:
Use GitHub Issues to track features/bugs
Link PRs to issues using # (e.g., Fixes #123)
Use GitHub Actions for CI/CD
Protect your main branch


-- one time setup
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"
git config --global pull.rebase true
git config --global init.defaultBranch main


# Stage the new file
git add GitPractices.txt

# Commit with a clear message
git commit -m "docs: add Git practices and workflow documentation"

# Push to GitHub
git push origin main